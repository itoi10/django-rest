# 仮想環境作成
python -m venv <仮想環境名>
source <仮想環境名>/bin/activate

(脱出) deactivate

インストール
pip install -r requirements.txt

プロジェクト作成
django-admin startproject config .

setting.py変更
LANGUAGE_CODE = 'ja'
TIME_ZONE = 'Asia/Tokyo'

DBマイグレート
python manage.py migrate

Webサーバ起動
python manage.py runserver

# アプリケーション作成
python manage.py startapp app

# アカウント関係のアプリケーション作成
python manage.py startapp accounts

settings.pyのINSTALLED_APPSに追加
'rest_framework'
'app'
'accounts'

# JWT認証とは
JSON Web Tokenの略
 JSON: JSの構造を持ったデータフォーマット
 Token: ユーザーを識別するための認証情報
JWTはJSのデータフォーマットの認証情報
JWT認証は署名が含まれているので改竄を検知できる


# カスタムユーザーモデル
Djangoでアプリを始めるときは必ずカスタムユーザを作る
https://h-memo.com/django-custom-user/


# 管理者作成
$ python manage.py createsuperuser

# API動作確認 (Postman)
## アカウント登録
POST http://127.0.0.1:8000/api/auth/register/
  Headers Content-Type : application/json
  Body
  - email : 任意
  - name : 任意
  - password : 任意
response:
  {"success": "ユーザーの作成に成功しました"}

## ログイン
POST http://127.0.0.1:8000/api/login/
  Headers Content-Type : application/json
  Body
  - email : 登録したもの
  - password : 登録したもの
response
  {"refresh": リフレッシュトークン, "access": アクセストークン}

## リフレッシュトークン
POST http://127.0.0.1:8000/api/refresh/
  Headers Content-Type : application/json
  Body
  - refresh : リフレッシュトークン
response
  {"access": 新しいアクセストークン}

## 認証チェック
POST http://127.0.0.1:8000/api/verify/
  Headers Content-Type : application/json
  Body
  - token : アクセストークン
response
  {}  200 OK

## ユーザー情報取得
GET http://127.0.0.1:8000/api/auth/user/
  Headers
  - Authorization : Bearer アクセストークン
response
  { "user": {"id": ユーザーID, "name": ユーザー名 , "email": メールアドレス} }


# dbが起動する前にdjangoがdbに接続しようとして can't connectエラーになる問題の解決法

"Can't connect to MySQL server on" を解消【Django × MySQL × Docker】
https://hiro8blog.com/cant-connect-to-mysql-server-on-%E3%82%92%E8%A7%A3%E6%B6%88%E3%80%90django-x-mysql-x-docker%E3%80%91/

Dockerizeを使って他のコンテナの起動を待つ
https://qiita.com/Aruneko/items/971e65a945d23f7bb8b6



# SWR データ取得のための React Hooks ライブラリ
https://swr.vercel.app/ja